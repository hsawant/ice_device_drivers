###############################################################################
# This Makefile contains the common rules to build for all the architectures.
# It is included from the architecture-specific Makefile.
# This Makefile requires the following variables:
# - ARCH: Architecture to build (for example i86Linux)
#
# Optional variables:
# - DEBUG: If set to '1', it turns on debugging information
# - SHAREDLIB: If set to '1', shared libraries will be used
# - RDB: If set to 'MYSQL', turns on MySQL support
# - CXX: compiler name.
# - CXXFLAGS: compiler flags: will be appended to $CXX command-line
# - CXXLD: linker name.
# - CXXLDFLAGS: linker flags: will be inserted at the beginning of CXXLD cmdline
# - SYSLIBS: additional system libraries to append to the CXXLD command-line

###############################################################################
# Ensure this Makefile is invoked with the right variable set

ifeq ($(ARCH), )
all:
	@echo "***************************************************************"
	@echo "You cannot use this Makefile directly, instead use the"
	@echo "architecture-specific Makefile. For example:"
	@echo "         gmake -f make/Makefile.x64Linux"
	@echo "***************************************************************"
	@false
endif

OBJDIRROOT   := obj/$(ARCH)
OBJDIR        = $(OBJDIRROOT)
BINDIRROOT   := bin/$(ARCH)
BINDIR        = $(BINDIRROOT)
SRCDIR       := src

###############################################################################
# SIMULATE the DIO analog board- define if no analog-digital board driver.
#
# Define the SIMULATE_DIO macro to account for absent DIO driver and
# library. If defined, the program simulates analog i/o (values generated by
# internal algorithm or read from sample data file, specified by
# configuration/command-line).
DEFINES = -DSIMULATE_DIO

###############################################################################
# Modify build flags for debug/release

ifeq ($(DEBUG),1)
CXXFLAGS += -g -O0
ifeq ($(SHAREDLIB),1)
else
endif
else
CXXFLAGS += -O2
ifeq ($(SHAREDLIB),1)
else
endif
endif

###############################################################################
INCLUDES  = \
  -I$(SRCDIR)

LIBS =  \
  $(SYSLIBS) -lboost_thread -lboost_system -lboost_date_time

###############################################################################
# Relational Database

ifeq ($(RDB), MYSQL)

INCLUDES +=  \
  -I/opt/mysql-5.1.63-linux-x86_64-glibc23/include \
  -I/usr/local/include \
  -I/usr/local/include/cppconn

LIBS += \
  -lmysqlcppconn \
  -L/opt/mysql-5.1.63-linux-x86_64-glibc23/lib \
  -lmysqlclient_r
endif

###############################################################################
APPSOURCES = \
  $(SRCDIR)/dd_pox_rad.cxx \
  $(SRCDIR)/devcomm.cxx \
  $(SRCDIR)/poxradthread.cxx \
  $(SRCDIR)/Property.cxx

APPHEADERS = \
  $(SRCDIR)/dd_pox_rad.h \
  $(SRCDIR)/devcomm.h \
  $(SRCDIR)/icexutils.h \
  $(SRCDIR)/mio_io.h \
  $(SRCDIR)/poxrad_data.h \
  $(SRCDIR)/poxrad_discrete.h \
  $(SRCDIR)/poxrad_waveform.h \
  $(SRCDIR)/poxradthread.h \
  $(SRCDIR)/projstd.h \
  $(SRCDIR)/Property.h

EXEC = dd_pox_rad

APPOBJS   = $(APPSOURCES:$(SRCDIR)/%.cxx=$(OBJDIR)/%.o)
ALLOBJS   = $(APPOBJS)

DIRECTORIES = $(OBJDIR).dir $(BINDIR).dir

###############################################################################
all : $(ARCH)

# Place objects in a sub directory.
$(ARCH) : $(DIRECTORIES) $(EXEC:%=$(BINDIR)/%)

$(BINDIR)/$(EXEC) : $(ALLOBJS)
	$(CXXLD) $(CXXLDFLAGS) -o $(BINDIR)/$(EXEC) $(ALLOBJS) $(LIBS)

$(APPOBJS)  : $(OBJDIR)/%.o : $(SRCDIR)/%.cxx \
  $(APPHEADERS)
	$(CXX) $(CXXFLAGS)  -o $@ $(DEFINES) $(INCLUDES) -c $<

clean :
	-rm $(BINDIR)/$(EXEC)
	-rm $(OBJDIRROOT)/*.o

# Create subdirectories automatically.
%.dir : 
	@if [ ! -d $* ]; then \
		mkdir -p $* ; \
	fi;

